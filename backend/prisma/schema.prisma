// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

model Session {
  id          String   @id
  sid         String   @unique
  data        String
  expiresAt   DateTime
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Need to think more about User and Profile models and improve them.
// A User is initially just a "Visitor" - not registered in db but can play and the score is tracked...how? frontend? localStorage?
// When clicks share - s/he is registered, score is stored in db associated with the user
// Transfer score before registration -> post registration
// Refresh??
model User {
  // This is a visitor. Username not required just score. We are storing in db...without registring the user by username
  id Int @id @default(autoincrement())

  numberOfCorrectAnswers Int @default(0)
  numberOfWrongAnswers   Int @default(0)

  profile Profile?
  rounds  Round[]
}

model Profile {
  id Int @id @default(autoincrement())

  username String @unique

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  // Sharing Link?? - expiry duration? 
}

// model Game {
//   // Implement later
// One game will have n number of Rounds. Overall scores are calculated based on...
// Restart game will allow users to start from scratch not tying them up with prev performance
// Highest scores, lowest scores, etc. can be tracked
// At the moment, there is only ONE game with n number of rounds (n - depends on how many times a user wants to play)

// }

model Round {
  id Int @id @default(autoincrement())

  clue CityDescription[] @relation("RoundClues")

  options City[] @relation("RoundOptions")

  correctAnswerId Int
  correctAnswer   City @relation("CorrectAnswer", fields: [correctAnswerId], references: [id])

  // Optional
  userAnswerId Int?
  userAnswer   City? @relation("UserAnswer", fields: [userAnswerId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Country {
  id   Int    @id @default(autoincrement())
  name String @unique

  cities City[]
}

model City {
  id   Int    @id @default(autoincrement())
  name String @unique

  countryId Int     @unique
  country   Country @relation(fields: [countryId], references: [id])

  description CityDescription[]

  correctAnswers Round[] @relation("CorrectAnswer")

  userAnswers  Round[] @relation("UserAnswer")
  optionRounds Round[] @relation("RoundOptions")
}

model CityDescription {
  id          Int             @id @default(autoincrement())
  type        DescriptionType
  description String

  cityId Int
  city   City @relation(fields: [cityId], references: [id])

  rounds Round[] @relation("RoundClues")
}

enum DescriptionType {
  CLUE
  FUN_FACT
  TRIVIA
}
